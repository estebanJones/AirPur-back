package fr.airpure.main.managers;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import fr.airpure.main.autoGenerated.ApiPollutionResponse;
import fr.airpure.main.autoGenerated.Feature;
import fr.airpure.main.dao.CommuneDAO;
import fr.airpure.main.entities.Commune;
import fr.airpure.main.entities.Polluant;
import fr.airpure.main.entities.Station;
import fr.airpure.main.exceptions.echange.NotFoundException;
import fr.airpure.main.services.PolluantService;
import fr.airpure.main.services.StationService;
import fr.airpure.main.utils.DateUtils;

@Service
public class ExtractAtmoApiManager {
	private static final Logger LOG = LoggerFactory.getLogger(ExtractAtmoApiManager.class);
	private static final String PATH_ATMO = "https://opendata.arcgis.com/datasets/4a648b54876f485e92f22e2ad5a5da32_0.geojson";
	
	private DateUtils dateUtils;
	private CommuneDAO communeDAO;
	private StationService stationService;
	private PolluantService polluantService;
	
	public ExtractAtmoApiManager(DateUtils dateUtils, CommuneDAO communeDAO, StationService stationService,  PolluantService polluantService) {
		this.dateUtils = dateUtils;
		this.communeDAO = communeDAO;
		this.stationService = stationService;
		this.polluantService = polluantService;
	}
	
	
	public void extract(RestTemplate restTemplate) {
			List<Feature> maListe = this.getDatasFromAtmo(restTemplate);
			long start = System.currentTimeMillis();
			LOG.info("Debut de la lecture du fichier JSON");
			this.extract(maListe);
			long tempsExecution = System.currentTimeMillis() - start;
			LOG.info("Fin du programme");
			LOG.info("--------------------------------------");
			LOG.info("Temps d'execution " + tempsExecution);
	}
	
	public void extract(List<Feature> maListe) {
		for (Feature m : maListe) {
			LOG.info("Formattage des dates terminés");
			try {
				// POUR CHAQUE LIGNE JE CREAIS UN POLLUANT ET UNE STATION
				// JE CHERCHE LA REGION PAR CODE INSEE DE LA COMMUNE TRAITEE
				// Region region = this.regionService.findByCodeInsee(String.valueOf(m.getProperties().getInseeCom()));
				String codeInsee = String.valueOf(m.getProperties().getInseeCom());
				Commune commune = this.communeDAO.findByCodeInsee(codeInsee);
				// JE CONVERTIS LES DATE
				LocalDateTime dateDebutFinale = this.parseAndConverte(m.getProperties().getDateDebut());
				LocalDateTime dateFinFinale = this.parseAndConverte(m.getProperties().getDateFin());
				// CREATION STATION
				Station station = this.stationService.creer(m);
				// JOINTURE STATION COMMUNE
				station.setCommune(commune);
				//PERSIST STATION
				Station stationDataBase = this.stationService.save(station);
				LOG.info("Station créée et persistées");
				// CREATION POLLUANT
				Polluant polluant = this.polluantService.creer(m, dateDebutFinale, dateFinFinale);
				// JOINTURE POLLUANT STATION
				polluant.setStation(stationDataBase);
				// PERSIST POLLUANT
				this.polluantService.save(polluant);
				LOG.info("Polluant créé et persistés");
			} catch (NotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			
		}
	}
	/**
	 * Enleve les millisecondes de la date et converti en LocalDateTime
	 * @param dateAtraiter
	 * @return
	 */
	public LocalDateTime parseAndConverte(String dateAtraiter) {
		final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"); 
		String date = this.dateUtils.parseDate(dateAtraiter);
		return LocalDateTime.parse(date, FORMATTER);
	}
	
	
	
	/**
	 * Recupere les données de qualité d'air du site Atmo
	 * @param restTemplate
	 * @return
	 */
	private List<Feature> getDatasFromAtmo(RestTemplate restTemplate) {
		ApiPollutionResponse qualiteAirListe = restTemplate.getForObject(PATH_ATMO, ApiPollutionResponse.class);
		return qualiteAirListe.getFeatures();
	}
	
	
	
	public List<Commune> getTop50Population()  {
		return this.communeDAO.getTop50Population();
	}
}
